import type { Metadata } from "next";
import { Geist, Geist_Mono, Pacifico } from "next/font/google";
import "./globals.css";

const pacifico = Pacifico({
  weight: '400',
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-pacifico',
})

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Readdy Site",
  description: "Generated by Readdy",
  // Enhanced responsive metadata
  viewport: {
    width: 'device-width',
    initialScale: 1,
    maximumScale: 5,
    userScalable: true,
  },
  // PWA and mobile app metadata
  themeColor: '#1d4ed8',
  appleWebApp: {
    capable: true,
    statusBarStyle: 'default',
    title: 'Readdy Site',
  },
  formatDetection: {
    telephone: false,
    email: false,
    address: false,
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning={true} className="scroll-smooth">
      <head>
        {/* Enhanced mobile viewport - works for all devices */}
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5, user-scalable=yes, viewport-fit=cover" />
        
        {/* Theme colors for both mobile and desktop */}
        <meta name="theme-color" content="#1d4ed8" />
        <meta name="msapplication-TileColor" content="#1d4ed8" />
        
        {/* Mobile app capabilities */}
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-status-bar-style" content="default" />
        <meta name="apple-mobile-web-app-title" content="Readdy Site" />
        <meta name="mobile-web-app-capable" content="yes" />
        
        {/* Performance optimization for all devices */}
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="" />
        <link rel="preconnect" href="https://cdnjs.cloudflare.com" />
        
        {/* Favicon and app icons */}
        <link rel="icon" href="/favicon.ico" sizes="any" />
        <link rel="icon" href="/favicon.svg" type="image/svg+xml" />
        <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
        <link rel="manifest" href="/manifest.json" />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${pacifico.variable} antialiased min-h-screen bg-white text-gray-900`}
      >
        {/* Skip to main content for accessibility - works on all devices */}
        <a 
          href="#main-content" 
          className="sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 bg-blue-600 text-white p-2 sm:p-3 rounded-br-lg z-50 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-400"
        >
          Skip to main content
        </a>
        
        {/* Main content wrapper - responsive for all screen sizes */}
        <div className="min-h-screen flex flex-col w-full overflow-x-hidden">
          <main id="main-content" className="flex-1 w-full">
            {children}
          </main>
        </div>
        
        {/* Scroll to top button - responsive for all devices */}
        <button
          id="scroll-to-top"
          className="fixed bottom-4 right-4 sm:bottom-6 sm:right-6 bg-blue-600 text-white p-2 sm:p-3 rounded-full shadow-lg hover:bg-blue-700 transition-all duration-200 opacity-0 invisible hover:scale-110 z-40 touch-manipulation focus:outline-none focus:ring-2 focus:ring-blue-400"
          onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
          aria-label="Scroll to top"
        >
          <svg className="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 10l7-7m0 0l7 7m-7-7v18" />
          </svg>
        </button>

        {/* Enhanced scroll functionality - optimized for all devices */}
        <script
          dangerouslySetInnerHTML={{
            __html: `
              // Universal scroll to top functionality
              let scrollTimer = null;
              let ticking = false;
              
              function handleScroll() {
                const scrollBtn = document.getElementById('scroll-to-top');
                if (!scrollBtn) return;
                
                if (window.pageYOffset > 300) {
                  scrollBtn.style.opacity = '1';
                  scrollBtn.style.visibility = 'visible';
                } else {
                  scrollBtn.style.opacity = '0';
                  scrollBtn.style.visibility = 'invisible';
                }
                ticking = false;
              }
              
              // Optimized scroll listener for all devices
              function requestTick() {
                if (!ticking) {
                  requestAnimationFrame(handleScroll);
                  ticking = true;
                }
              }
              
              window.addEventListener('scroll', requestTick, { passive: true });
              
              // Prevent zoom on double tap for mobile (iOS Safari)
              let lastTouchEnd = 0;
              document.addEventListener('touchend', function (event) {
                const now = Date.now();
                if (now - lastTouchEnd <= 300) {
                  event.preventDefault();
                }
                lastTouchEnd = now;
              }, { passive: false });
              
              // Handle orientation changes smoothly
              window.addEventListener('orientationchange', function() {
                setTimeout(function() {
                  window.scrollTo(window.scrollX, window.scrollY);
                }, 500);
              });
            `,
          }}
        />
      </body>
    </html>
  );
}